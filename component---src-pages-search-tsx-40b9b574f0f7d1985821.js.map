{"version":3,"sources":["webpack:///(webpack)/buildin/module.js","webpack:///./src/pages/search.tsx","webpack:///./src/components/PostList/index.tsx"],"names":["module","exports","webpackPolyfill","deprecate","paths","children","Object","defineProperty","enumerable","get","l","i","pageQuery","Search","props","posts","data","allMarkdownRemark","edges","useState","value","setValue","isTitleOnly","setIsTitleOnly","filteredPosts","filter","post","node","frontmatter","rawMarkdownBody","title","lowerValue","toLocaleLowerCase","includes","id","className","icon","faSearch","type","name","placeholder","autoComplete","autoFocus","onChange","e","currentTarget","style","opacity","onClick","length","PostList","showCnt","setShowCnt","currentPostList","setCurrentPostList","sort","a","b","af","bf","aDate","Date","update","date","bDate","throttleScrollHandler","useCallback","throttle","window","outerHeight","document","querySelector","getBoundingClientRect","bottom","prev","expendPostList","list","mapToList","map","excerpt","fields","slug","tags","Number","split","mapTag","tag","key","to","useEffect","slice","addEventListener","removeEventListener"],"mappings":"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","file":"component---src-pages-search-tsx-40b9b574f0f7d1985821.js","sourcesContent":["module.exports = function(module) {\n\tif (!module.webpackPolyfill) {\n\t\tmodule.deprecate = function() {};\n\t\tmodule.paths = [];\n\t\t// module.parent = undefined by default\n\t\tif (!module.children) module.children = [];\n\t\tObject.defineProperty(module, \"loaded\", {\n\t\t\tenumerable: true,\n\t\t\tget: function() {\n\t\t\t\treturn module.l;\n\t\t\t}\n\t\t});\n\t\tObject.defineProperty(module, \"id\", {\n\t\t\tenumerable: true,\n\t\t\tget: function() {\n\t\t\t\treturn module.i;\n\t\t\t}\n\t\t});\n\t\tmodule.webpackPolyfill = 1;\n\t}\n\treturn module;\n};\n","/* eslint-disable @typescript-eslint/no-explicit-any */\n\nimport * as React from 'react';\nimport { useState } from 'react';\nimport { FontAwesomeIcon as Fa } from '@fortawesome/react-fontawesome';\nimport { faSearch } from '@fortawesome/free-solid-svg-icons';\n\nimport Layout from '../components/Layout';\nimport SEO from '../components/seo';\nimport { graphql } from 'gatsby';\nimport PostList from '../components/PostList';\nimport './styles/search.scss';\n\ninterface SearchProps {\n  data: any;\n}\n\nconst Search = (props: SearchProps) => {\n  const { data } = props;\n  const posts = data.allMarkdownRemark.edges;\n\n  const [value, setValue] = useState('');\n  const [isTitleOnly, setIsTitleOnly] = useState(true);\n\n  const filteredPosts: any[] = posts.filter((post: any) => {\n    const { node } = post;\n    const { frontmatter, rawMarkdownBody } = node;\n    const { title } = frontmatter;\n    const lowerValue = value.toLocaleLowerCase();\n\n    if (!isTitleOnly && rawMarkdownBody.toLocaleLowerCase().includes(lowerValue)) return true;\n\n    return title.toLocaleLowerCase().includes(lowerValue);\n  });\n\n  return (\n    <Layout>\n      <SEO title=\"Search\" />\n      <div id=\"Search\">\n        <div className=\"search-inner-wrap\">\n          <div className=\"input-wrap\">\n            <Fa icon={faSearch} />\n            <input\n              type=\"text\"\n              name=\"search\"\n              id=\"searchInput\"\n              value={value}\n              placeholder=\"Search\"\n              autoComplete=\"off\"\n              autoFocus\n              onChange={(e: React.FormEvent<HTMLInputElement>) => {\n                setValue(e.currentTarget.value);\n              }}\n            />\n            <div className=\"search-toggle\">\n              <span\n                style={{ opacity: isTitleOnly ? 0.8 : 0.15 }}\n                onClick={() => {\n                  setIsTitleOnly(true);\n                }}\n              >\n                in Title\n              </span>\n              <span\n                style={{ opacity: !isTitleOnly ? 0.8 : 0.15 }}\n                onClick={() => {\n                  setIsTitleOnly(false);\n                }}\n              >\n                in Title+Content\n              </span>\n            </div>\n          </div>\n\n          {value !== '' && !filteredPosts.length ? <span className=\"no-result\">No search results</span> : null}\n          <PostList posts={value === '' ? posts : filteredPosts} />\n        </div>\n      </div>\n    </Layout>\n  );\n};\n\nexport const pageQuery = graphql`\n  query {\n    allMarkdownRemark(sort: { fields: [frontmatter___date], order: DESC }) {\n      edges {\n        node {\n          rawMarkdownBody\n          excerpt(truncate: true, format: PLAIN)\n          fields {\n            slug\n          }\n          frontmatter {\n            date(formatString: \"MMM DD, YYYY\")\n            title\n            tags\n            update(formatString: \"MMM DD, YYYY\")\n          }\n        }\n      }\n    }\n  }\n`;\n\nexport default Search;\n","/* eslint-disable @typescript-eslint/no-explicit-any */\n\nimport * as React from 'react';\nimport { useEffect, useState, useCallback } from 'react';\nimport { Link } from 'gatsby';\nimport { throttle } from 'lodash';\n\nimport './postList.scss';\n\ninterface PostListProps {\n  posts: any[];\n}\n\nconst PostList = (props: PostListProps) => {\n  const { posts } = props;\n  const [showCnt, setShowCnt] = useState(10);\n  const [currentPostList, setCurrentPostList] = useState<JSX.Element[]>([]);\n\n  posts.sort((a: any, b: any) => {\n    const af = a.node.frontmatter;\n    const bf = b.node.frontmatter;\n\n    const aDate = new Date(af.update.includes('0001') ? af.date : af.update);\n    const bDate = new Date(bf.update.includes('0001') ? bf.date : bf.update);\n\n    if (aDate < bDate) return 1;\n    if (aDate > bDate) return -1;\n    return 0;\n  });\n\n  const throttleScrollHandler = useCallback(\n    throttle(() => {\n      if (\n        window.outerHeight > (document.querySelector('.post-list') as HTMLDivElement).getBoundingClientRect().bottom\n      ) {\n        setShowCnt((prev: number) => {\n          if (prev >= posts.length) return prev;\n          return prev + 10;\n        });\n      }\n    }, 250),\n    [posts]\n  );\n\n  const expendPostList = useCallback((list: any) => {\n    const mapToList = list.map((post: any) => {\n      const { node } = post;\n      const { excerpt, fields, frontmatter } = node;\n      const { slug } = fields;\n      const { date, title, tags } = frontmatter;\n      let update = frontmatter.update;\n      if (Number(update.split(',')[1]) === 1) update = null;\n\n      const mapTag = tags.map((tag: string) => {\n        if (tag === 'undefined') return;\n\n        return (\n          <div key={`${slug}-${tag}`} className=\"tag\">\n            <span>\n              <Link to={`/tags#${tag}`}>{`#${tag}`}</Link>\n            </span>\n          </div>\n        );\n      });\n\n      return (\n        <li key={slug} className={`post`}>\n          <article>\n            <h2 className=\"title\">\n              <Link to={slug}>{title}</Link>\n            </h2>\n            <div className=\"info\">\n              <div className=\"date-wrap\">\n                <span className=\"date\">{date}</span>\n                {update ? <span className=\"update\">&nbsp;{`(Updated: ${update})`}</span> : null}\n              </div>\n              {tags.length && tags[0] !== 'undefined' ? <span className=\"info-dot\">·</span> : null}\n              <ul className=\"tag-list\">{mapTag}</ul>\n            </div>\n            <span className=\"excerpt\">\n              <Link to={slug}>{excerpt}</Link>\n            </span>\n          </article>\n        </li>\n      );\n    });\n\n    setCurrentPostList((prev: JSX.Element[]) => {\n      return [...prev, ...mapToList];\n    });\n  }, []);\n\n  useEffect(() => {\n    if (showCnt > 0 && showCnt !== 10) expendPostList(posts.slice(currentPostList.length, showCnt));\n  }, [showCnt]);\n\n  useEffect(() => {\n    if (currentPostList.length) setCurrentPostList([]);\n\n    setShowCnt((prev: number) => {\n      if (prev === 10) expendPostList(posts.slice(0, 10));\n      return 10;\n    });\n\n    window.addEventListener('scroll', throttleScrollHandler);\n\n    return () => {\n      window.removeEventListener('scroll', throttleScrollHandler);\n    };\n  }, [posts]);\n\n  return (\n    <div className=\"post-list\">\n      <ul>{currentPostList}</ul>\n    </div>\n  );\n};\n\nexport default PostList;\n"],"sourceRoot":""}