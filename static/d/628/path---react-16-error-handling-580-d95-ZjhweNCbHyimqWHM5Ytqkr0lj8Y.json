{"data":{"site":{"siteMetadata":{"title":"HUNDRED","author":"Junho Baik"}},"markdownRemark":{"id":"bd7aeb01-f466-5a89-8cec-48f5cbf73554","html":"<p>리액트 16 에서는 LifeCycle에 많은 변화가 있었고 17에서는 더 많은 변화가 있을 것이라고 예고했다.</p>\n<p>이번에 새로 등장한 <code class=\"language-text\">componentDidCatch(error, info)</code> 라이프사이클 메소드를 이용해 에러를 관리하는 방법을 살펴보자.</p>\n<h2>기본적인 사용법</h2>\n<div class=\"gatsby-highlight\" data-language=\"react\">\n      <pre class=\"language-react\"><code class=\"language-react\">class BoundaryError extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      hasError: false\n    };\n  }\n\n  componentDidCatch(error, info) {\n    this.setState({ hasError: true });\n  }\n\n  render() {\n    if (this.state.hasError) return &lt;h1&gt;ERROR!&lt;/h1&gt;;\n    else return this.props.children;\n  }\n}</code></pre>\n      </div>\n<div class=\"gatsby-highlight\" data-language=\"react\">\n      <pre class=\"language-react\"><code class=\"language-react\">&lt;BoundaryError&gt;\n    &lt;Component1 /&gt;\n&lt;/BoundaryError&gt;</code></pre>\n      </div>\n<p>위의 코드를 살펴보면 <code class=\"language-text\">componentDidCatch</code>에서 에러를 잡아 <code class=\"language-text\">setState</code>로 <code class=\"language-text\">hasError</code>값을 바꿔 에러 상태값을 관리하고<br>\n그 상태값에 따라 리턴을 달리해 에러시에는 에러 문구로 에러가 난 컴포넌트를 대신하게 된다.</p>\n<p>이렇게 하면 에러가 발생함에 따라 리액트 페이지 전체가 먹통이 되는 현상을 방지 할 수 있다.</p>\n<h2>HOC와 함께 사용하기</h2>\n<p>HOC는 Higher-Order Components로 간단히 설명하면 컴포넌트를 감싸는 컴포넌트라고 할 수 있다.</p>\n<p>HOC에 대한 자세한 설명은 생략하고 Error Handling을 하는데 어떻게 사용하는지를 살펴보겠다.</p>\n<div class=\"gatsby-highlight\" data-language=\"react\">\n      <pre class=\"language-react\"><code class=\"language-react\">const withErrorBoundary = WrappedComponent =&gt;\n  class extends Component {\n    state = {\n      hasError: false\n    };\n    componentDidCatch(error) {\n      this.setState({ hasError: true });\n    }\n    render() {\n      if (this.state.hasError) return &quot;Sorry...&quot;;\n      else return &lt;WrappedComponent /&gt;;\n    }\n  };</code></pre>\n      </div>\n<p>위와 같이 클래스를 만드는 함수로 <code class=\"language-text\">withErrorBoundary</code>를 작성했다.</p>\n<div class=\"gatsby-highlight\" data-language=\"react\">\n      <pre class=\"language-react\"><code class=\"language-react\">const Component1WithErrorBoundary = withErrorBoundary(Component1);\nconst Component2WithErrorBoundary = withErrorBoundary(Component2);\nconst Component3WithErrorBoundary = withErrorBoundary(Component3);</code></pre>\n      </div>\n<div class=\"gatsby-highlight\" data-language=\"react\">\n      <pre class=\"language-react\"><code class=\"language-react\">render(){\n    return (\n    \t&lt;&gt;\n        \t&lt;Component1WithErrorBoundary /&gt;\n    \t    &lt;Component2WithErrorBoundary /&gt;\n\t        &lt;Component3WithErrorBoundary /&gt;\n        &lt;/&gt;\n    )\n}</code></pre>\n      </div>\n<p>이제 위와 같이 사용할 수 있는데 이렇게 되면 에러가 난 컴포넌트만 해당 컴포넌트가 아닌 'Sorry…' 문구가 출력되게 될 것이며, 에러로 인해 리액트 페이지 전체가 먹통이 되는 현상을 방지 할 수 있다.</p>\n<hr>\n<h2>Reference</h2>\n<ul>\n<li><a href=\"https://reactjs.org/blog/2017/07/26/error-handling-in-react-16.html\">React Documents</a></li>\n<li><a href=\"academy.nomadcoders.co\">Nomad Coders</a> - React 16 마스터하기</li>\n</ul>","excerpt":"리액트 16 에서는 LifeCycle에 많은 변화가 있었고 1…","frontmatter":{"title":"react 16, Error handling with HOC","date":"2018-10-31","tags":["react"],"keywords":["react 에러","react error boundries","react error handling","react hoc","Higher Order Components"]}}},"pageContext":{"slug":"/react-16-error-handling/","previous":{"fields":{"slug":"/react-16-portals/"},"frontmatter":{"title":"react 16, Portals","tags":["react"],"published":true}},"next":null}}